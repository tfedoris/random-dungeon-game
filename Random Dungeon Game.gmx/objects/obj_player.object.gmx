<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;
player_speed = 2;
timer = 0;
state = "IDLE";
facing = 0; // 0 - up, 1 - right, 2 - down, 3 - left;

iframes = 0;

hp = 40;
hp_containers = 5;
hp_max_containers = 16;

//Items
keys = 0;
bossKeys = 0;
totalKeys = 0;

sprite_walk = spr_player_up;
sprite_attack = spr_player_attack_up;

xscale = image_xscale;

death_frames = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_enemy_death);
global.wait_frames = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_speed = 0.2;

switch(state) {
    case "ATTACK_SWORD_START": {
        image_speed = 0;
        vx = 0;
        vy = 0;
        timer = 15;
        sprite_index = sprite_attack;
        state = "ATTACK_SWORD";
        break;
    }
    case "ATTACK_SWORD": 
    {
        if (timer == 8) 
        {
            switch(facing) 
            {
                case 0: 
                {
                    object_set_depth(obj_sword, -4);
                    with(instance_create(x, y-12, obj_sword) ) 
                    {
                        image_angle = 0;
                    }
                    break;
                }
                case 1: 
                {
                    object_set_depth(obj_sword, -4);
                    with(instance_create(x+12, y+2, obj_sword) ) 
                    {
                        image_angle = 270;
                    }
                    break;
                }
                case 2: 
                {
                    object_set_depth(obj_sword, -6);
                    with(instance_create(x, y+12, obj_sword) ) 
                    {
                        object_set_depth(obj_sword, -6);
                        image_angle = 180;
                    }
                    break;
                }
                case 3: 
                {
                    object_set_depth(obj_sword, -4);
                    with(instance_create(x-12, y+2, obj_sword) ) 
                    {
                        object_set_depth(obj_sword, -4);
                        image_angle = 90;
                    }
                    break;
                }
            }
        }
    
        if (timer &gt; 0) 
        {
            timer -= 1;
        } 
        else 
        {
            state = "IDLE";
        }
        break;
    }
    case "IDLE": 
    {
        image_speed = 0;
        sprite_index = sprite_walk;
        
        vx = 0;
        vy = 0;
        check_inputs_all();
        break;
    }
    case "UP": 
    {
        facing = 0;
        image_speed = anim_speed;
        sprite_walk = spr_player_up;
        sprite_attack = spr_player_attack_up;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = align_to_grid(x, 8);
        vy = -1 * player_speed;
        
        check_inputs_all();
        break;
    }
    case "DOWN": 
    {
        facing = 2;
        image_speed = anim_speed;
        sprite_walk = spr_player_down;
        sprite_attack = spr_player_attack_down;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = align_to_grid(x, 8);
        vy = player_speed;
        
        check_inputs_all();
        break;
    }
    case "LEFT": 
    {
        facing = 3;
        image_speed = anim_speed;
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_attack_side;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = -1 * player_speed;
        vy = align_to_grid(y, 8);
        
        check_inputs_all();
        break;
    }
    case "RIGHT": 
    {
        facing = 1;
        image_speed = anim_speed;
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_attack_side;
        sprite_index = sprite_walk;
        
        image_xscale = -1;
        vx = player_speed;
        vy = align_to_grid(y, 8);
        
        check_inputs_all();
        break;
    }
    case "DEATH": 
    {
        vx = 0;
        vy = 0;
        image_speed = 0;
        sprite_walk = spr_player_down;
        death_frames++;
        
        if (audio_is_playing(mus_dungeon01)) audio_stop_sound(mus_dungeon01);
        if (audio_is_playing(mus_boss)) audio_stop_sound(mus_boss);
        
        if (!audio_is_playing(snd_death)) audio_play_sound(snd_death, 10, false);
        
        if (death_frames mod 10 == 0) image_angle += 90;
        
        if (death_frames &gt; 149) instance_destroy();
        
        break;
    }
}

//Check to see if a collided door can be unlocked
check_unlock_door();

//Check to see if collision with pedestal to unlock boss door
check_collision_pedestal();

//Check for pushing blocks
push_block();

//Perform final collision checks and then move
check_collision_obj(vx, vy, obj_solid, obj_door, obj_boss_door, obj_block, obj_pedestal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// iframe timer
if (iframes &gt; 0) {
    iframes --;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check collision with enemy

mask_index = sprite_index;

var enemy = instance_place(x, y, obj_par_enemy);

if (enemy != noone) 
{
    /// collide with enemy
    if (iframes == 0 &amp;&amp; state != "DEATH") 
    {
        iframes = 30;
        hp -= enemy.damage;
        audio_play_sound(snd_player_dmg, 7, false);
    }
}

mask_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set xscale
xscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death check

if (hp &lt;= 0) state = "DEATH";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    if (other.iframes == 0 &amp;&amp; other.state != "DEATH")
    {
        other.iframes = 30;
        other.hp -= damage;
        audio_play_sound(snd_player_dmg, 7, false);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boss_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
    other.bossKeys++;
    instance_destroy();
    audio_play_sound(snd_item, 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
    other.keys++;
    other.totalKeys++;
    instance_destroy();
    audio_play_sound(snd_item, 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart_container">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add heart container
with (other) 
{
    other.hp_containers = clamp(other.hp_containers + 1, 0, other.hp_max_containers);
    other.hp = 8 * other.hp_containers;
    audio_play_sound(mus_jingle01, 10, false);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collide with hearts
with (other) 
{
    other.hp = clamp(other.hp + hp, 0, other.hp_containers*8);
    audio_play_sound(snd_heart, 4, false);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw player
if (iframes &gt; 0 &amp;&amp; iframes mod 3 == 0) 
{
    
} 
else 
{
    draw_self();
}

if (global.debug) 
{
    draw_set_color(c_blue);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    draw_text(view_xview[0] + (view_hview[0] / 4), view_yview + 16, "X: " + string(x) + " Y: " + string(y));
    draw_text(view_xview[0] + ((view_hview[0] / 4)), view_yview + 32, "L: " + string(bbox_left) + " R: " + string(bbox_right));
    draw_text(view_xview[0] + ((view_hview[0] / 4)), view_yview + 48, "T: " + string(bbox_top) + " B: " + string(bbox_bottom));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

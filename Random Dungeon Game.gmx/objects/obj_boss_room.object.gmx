<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize variables
origin_x = 0;
origin_y = 0;
is_start = false;
room_grid = room_init_boss();
grid_height = ds_grid_height(room_grid);
grid_width = ds_grid_width(room_grid);
generation = 0;

//Exits
north_room = noone;
south_room = noone;
west_room = noone;
east_room = noone;

//Boss Exits?
north_boss = false;
south_boss = false;
east_boss = false;
west_boss = false;

//Locked variables
is_locked = false;
pending_key = false;
has_key = false;
north_locked = false;
south_locked = false;
east_locked = false;
west_locked = false;

//Puzzle variables
is_puzzle = false;
puzzle_solved = false;
puzzle_solution = noone;
tiles_to_solve = 0;
blocks = ds_list_create();
puzzle_index = -4;

//Map variables
x1 = (origin_x / 10);
x2 = ((origin_x + 256) / 10);
y1 = (origin_y / 10);
y2 = ((origin_y + 176) / 10); 
is_boss_room = true;
final_room = true;

num_enemies = -10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x == view_xview[0] &amp;&amp; y == view_yview[0])
{
    global.viewRoom = self;
}

if (global.viewRoom == self)
{
    draw_collision_boxes(global.viewRoom);
    gen_room_objects_boss(global.viewRoom);
    
    if (!audio_is_playing(mus_boss) &amp;&amp; instance_exists(obj_player) &amp;&amp; !audio_is_playing(mus_titlescreen)) audio_play_sound(mus_boss, 5, true);
}

x1 = (origin_x / 10);
x2 = ((origin_x + 256) / 10);
y1 = (origin_y / 10);
y2 = ((origin_y + 176) / 10); 

if (num_enemies == 0 &amp;&amp; !audio_is_playing(mus_dungeon02) &amp;&amp; !audio_is_playing(snd_win))
{
    audio_play_sound(mus_dungeon02, 10, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var ix = 0; ix &lt; grid_width; ix++)
{
    for (var iy = 0; iy &lt; grid_height; iy++)
    {
        var tile = room_grid[# ix, iy];
        var tile_size = 16;
        var xx, yy;
        
        xx = (ix mod 16) * tile_size + origin_x;
        yy = iy * tile_size + origin_y;
        
        switch(tile) 
        {
            case 'UL': 
            {
                if (instance_exists(north_room)) 
                {
                    draw_background_part(bg_dungeon, 0 * tile_size, 7 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'UR': 
            {
                if (instance_exists(north_room)) 
                {
                    draw_background_part(bg_dungeon, 1 * tile_size, 7 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'DL': 
            {
                if (instance_exists(south_room)) 
                {
                    draw_background_part(bg_dungeon, 7 * tile_size, 8 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'DR': 
            {
                if (instance_exists(south_room)) 
                {
                    draw_background_part(bg_dungeon, 8 * tile_size, 8 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'L0': 
            {
                if (instance_exists(west_room)) 
                {
                    draw_background_part(bg_dungeon, 0 * tile_size, 12 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'R0': 
            {
                if (instance_exists(east_room)) 
                {
                    draw_background_part(bg_dungeon, 1 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
        }     
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var ix = 0; ix &lt; grid_width; ix++)
{
    for (var iy = 0; iy &lt; grid_height; iy++)
    {
        var tile = room_grid[# ix, iy];
        var tile_size = 16;
        var xx, yy;
        
        xx = (ix mod 16) * tile_size + origin_x;
        yy = iy * tile_size + origin_y;
        
        switch(tile) 
        {
            case '00': 
            {
                draw_background_part(bg_dungeon, 1 * tile_size, 1 * tile_size, tile_size, tile_size, xx , yy);
                break;
            }
            case 'LL': 
            {
                draw_background_part(bg_dungeon, 2 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'RR': 
            {
                draw_background_part(bg_dungeon, 0 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'UU': 
            {
                draw_background_part(bg_dungeon, 1 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'DD': 
            {
                draw_background_part(bg_dungeon, 1 * tile_size, 0 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'FL': 
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'BL':
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'PB':
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'En':
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'XX':
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'VX':
            {
                draw_background_part(bg_dungeon, 5 * tile_size, 6 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'KK':
            {
                draw_background_part(bg_dungeon, 8 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'NL': 
            {
                if (instance_exists(north_room)) 
                {
                    if (!north_locked) draw_background_part(bg_dungeon, 2 * tile_size, 6 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!north_boss) draw_background_part(bg_dungeon, 0, 8 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 3 * tile_size, 8 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'NR': 
            {
                if (instance_exists(north_room)) 
                {
                    if (!north_locked) draw_background_part(bg_dungeon, 3 * tile_size, 6 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!north_boss) draw_background_part(bg_dungeon, 1 * tile_size, 8 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 4 * tile_size, 8 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 2 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'SL': 
            {
                if (instance_exists(south_room)) 
                {
                    if (!south_locked) draw_background_part(bg_dungeon, 7 * tile_size, 7 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!south_boss) draw_background_part(bg_dungeon, 6 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 7 * tile_size, 9 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 0, tile_size, tile_size, xx, yy);
                break;
            }
            case 'SR': 
            {
                if (instance_exists(south_room)) 
                {
                    if (!south_locked) draw_background_part(bg_dungeon, 8 * tile_size, 7 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!south_boss) draw_background_part(bg_dungeon, 7 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 8 * tile_size, 9 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 1 * tile_size, 0, tile_size, tile_size, xx, yy);
                break;
            }
            case 'WW': 
            {
                if (instance_exists(west_room)) 
                {
                    if (!west_locked) draw_background_part(bg_dungeon, 1 * tile_size, 12 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!west_boss) draw_background_part(bg_dungeon, 3 * tile_size, 12 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 5 * tile_size, 12 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 2 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'EE': 
            {
                if (instance_exists(east_room)) 
                {
                    if (!east_locked) draw_background_part(bg_dungeon, 0 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                    else 
                    {
                        if (!east_boss) draw_background_part(bg_dungeon, 2 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                        else draw_background_part(bg_dungeon, 4 * tile_size, 11 * tile_size, tile_size, tile_size, xx, yy);
                    }
                }
                else draw_background_part(bg_dungeon, 0 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'C1':
            {
                draw_background_part(bg_dungeon, 3 * tile_size, 0 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'C2':
            {
                draw_background_part(bg_dungeon, 4 * tile_size, 0 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'C3':
            {
                draw_background_part(bg_dungeon, 4 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
            case 'C4':
            {
                draw_background_part(bg_dungeon, 3 * tile_size, 1 * tile_size, tile_size, tile_size, xx, yy);
                break;
            }
        }     
    }
}

if (global.debug)
{
    draw_sprite(spr_room_test, image_index, x, y);
    draw_set_color(c_white);
    draw_text(x, y, string(generation));
    //draw_grid();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
